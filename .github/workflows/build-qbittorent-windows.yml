name: Build and Release qBittorrent Installer

on:
  push:
    tags: # This workflow will now only run when a Git tag (e.g., v1.0.0, v4.6.5) is pushed
      - 'v*.*.*'
      - 'v*.*.*-*' # Allows for pre-release tags like v4.6.5-beta1
  workflow_dispatch: # Keep manual trigger for convenience

permissions: {} # Default permissions

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.head_ref != '' }}

jobs:
  ci:
    name: Build
    runs-on: windows-latest
    permissions:
      actions: write # Required for upload-artifact

    strategy:
      fail-fast: false
      matrix:
        libt_version: ["2.0.11", "1.2.20"]

    env:
      boost_path: "${{ github.workspace }}/../boost"
      libtorrent_path: "${{ github.workspace }}/../libtorrent"
      vcpkg_path: "c:/vcpkg"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build tools
        run: |
          if ((Get-Command "ninja.exe" -ErrorAction SilentlyContinue) -eq $null)
          {
             choco install ninja
          }
          where.exe ninja
          ninja --version

      # https://learn.microsoft.com/en-us/vcpkg/users/binarycaching#gha
      - name: Set variables for vcpkg
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', (process.env.ACTIONS_CACHE_URL || ''));
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', (process.env.ACTIONS_RUNTIME_TOKEN || ''));

      - name: Install dependencies with vcpkg
        run: |
          # create our own triplet
          New-Item `
            -Force `
            -ItemType File `
            -Path "${{ env.vcpkg_path }}/triplets_overlay/x64-windows-static-md-release.cmake"
          # OpenSSL isn't compatible with `/guard:cf` flag so we omit it for now, see: https://github.com/openssl/openssl/issues/22554
          Add-Content `
            -Path "${{ env.vcpkg_path }}/triplets_overlay/x64-windows-static-md-release.cmake" `
            -Value @("set(VCPKG_TARGET_ARCHITECTURE x64)",
              "set(VCPKG_LIBRARY_LINKAGE static)",
              "set(VCPKG_CRT_LINKAGE dynamic)",
              "set(VCPKG_BUILD_TYPE release)")
          # clear buildtrees after each package installation to reduce disk space requirements
          $packages = `
            "boost-build:x64-windows-static-md-release",
            "openssl:x64-windows-static-md-release",
            "zlib:x64-windows-static-md-release"
          ${{ env.vcpkg_path }}/vcpkg.exe upgrade `
            --no-dry-run `
            --overlay-triplets="${{ env.vcpkg_path }}/triplets_overlay"
          ${{ env.vcpkg_path }}/vcpkg.exe install `
            --binarysource="clear;x-gha,readwrite" `
            --clean-after-build `
            --overlay-triplets="${{ env.vcpkg_path }}/triplets_overlay" `
            $packages

      - name: Install boost
        env:
          BOOST_MAJOR_VERSION: "1"
          BOOST_MINOR_VERSION: "86"
          BOOST_PATCH_VERSION: "0"
        run: |
          $boost_url="https://archives.boost.io/release/${{ env.BOOST_MAJOR_VERSION }}.${{ env.BOOST_MINOR_VERSION }}.${{ env.BOOST_PATCH_VERSION }}/source/boost_${{ env.BOOST_MAJOR_VERSION }}_${{ env.BOOST_MINOR_VERSION }}_${{ env.BOOST_PATCH_VERSION }}.tar.gz"
          $boost_url2="https://sourceforge.net/projects/boost/files/boost/${{ env.BOOST_MAJOR_VERSION }}.${{ env.BOOST_MINOR_VERSION }}.${{ env.BOOST_PATCH_VERSION }}/boost_${{ env.BOOST_MAJOR_VERSION }}_${{ env.BOOST_MINOR_VERSION }}_${{ env.BOOST_PATCH_VERSION }}.tar.gz"
          curl -L -o "${{ runner.temp }}/boost.tar.gz" "$boost_url"
          tar -xf "${{ runner.temp }}/boost.tar.gz" -C "${{ github.workspace }}/.."
          if ($LastExitCode -ne 0)
          {
            curl -L -o "${{ runner.temp }}/boost.tar.gz" "$boost_url2"
            tar -xf "${{ runner.temp }}/boost.tar.gz" -C "${{ github.workspace }}/.."
          }
          move "${{ github.workspace }}/../boost_*" "${{ env.boost_path }}"
          cd "${{ env.boost_path }}"
          #.\bootstrap.bat
          ${{ env.vcpkg_path }}/installed/x64-windows-static-md-release/tools/boost-build/b2.exe `
            stage `
            toolset=msvc `
            --stagedir=.\ `
            --with-headers

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: "6.9.0"
          arch: win64_msvc2022_64
          archives: qtbase qtsvg qttools
          cache: true

      - name: Install libtorrent
        run: |
          git clone `
            --branch v${{ matrix.libt_version }} `
            --depth 1 `
            --recurse-submodules `
            https://github.com/arvidn/libtorrent.git `
            ${{ env.libtorrent_path }}
          cd ${{ env.libtorrent_path }}
          $env:CXXFLAGS+=" /guard:cf"
          $env:LDFLAGS+=" /guard:cf"
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_CXX_STANDARD=20 `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
            -DCMAKE_INSTALL_PREFIX="${{ env.libtorrent_path }}/install" `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.vcpkg_path }}/scripts/buildsystems/vcpkg.cmake" `
            -DBOOST_ROOT="${{ env.boost_path }}/lib/cmake" `
            -DBUILD_SHARED_LIBS=OFF `
            -Ddeprecated-functions=OFF `
            -Dstatic_runtime=OFF `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static-md-release
          cmake --build build
          cmake --install build

      - name: Build qBittorrent
        run: |
          $env:CXXFLAGS+="/DQT_FORCE_ASSERTS /WX"
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.vcpkg_path }}/scripts/buildsystems/vcpkg.cmake" `
            -DBOOST_ROOT="${{ env.boost_path }}/lib/cmake" `
            -DLibtorrentRasterbar_DIR="${{ env.libtorrent_path }}/install/lib/cmake/LibtorrentRasterbar" `
            -DMSVC_RUNTIME_DYNAMIC=ON `
            -DTESTING=ON `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static-md-release `
            -DVERBOSE_CONFIGURE=ON `
            --graphviz=build/target_graph.dot
          cmake --build build --target qbt_update_translations
          cmake --build build
          cmake --build build --target check

      - name: Prepare build artifacts (Portable Zip & Installer)
        id: prepare_artifacts # Add an ID to easily access output variables from this step
        run: |
          $buildDir = "upload/qBittorrent"
          mkdir $buildDir
          copy build/qbittorrent.exe $buildDir
          copy build/qbittorrent.pdb $buildDir
          copy dist/windows/qt.conf $buildDir
          # runtimes
          copy "${{ env.Qt_ROOT_DIR }}/bin/Qt6Core.dll" $buildDir
          copy "${{ env.Qt_ROOT_DIR }}/bin/Qt6Gui.dll" $buildDir
          copy "${{ env.Qt_ROOT_DIR }}/bin/Qt6Network.dll" $buildDir
          copy "${{ env.Qt_ROOT_DIR }}/bin/Qt6Sql.dll" $buildDir
          copy "${{ env.Qt_ROOT_DIR }}/bin/Qt6Svg.dll" $buildDir
          copy "${{ env.Qt_ROOT_DIR }}/bin/Qt6Widgets.dll" $buildDir
          copy "${{ env.Qt_ROOT_DIR }}/bin/Qt6Xml.dll" $buildDir
          mkdir "$buildDir/plugins/iconengines"
          copy "${{ env.Qt_ROOT_DIR }}/plugins/iconengines/qsvgicon.dll" "$buildDir/plugins/iconengines"
          mkdir "$buildDir/plugins/imageformats"
          copy "${{ env.Qt_ROOT_DIR }}/plugins/imageformats/qico.dll" "$buildDir/plugins/imageformats"
          copy "${{ env.Qt_ROOT_DIR }}/plugins/imageformats/qsvg.dll" "$buildDir/plugins/imageformats"
          mkdir "$buildDir/plugins/platforms"
          copy "${{ env.Qt_ROOT_DIR }}/plugins/platforms/qwindows.dll" "$buildDir/plugins/platforms"
          mkdir "$buildDir/plugins/sqldrivers"
          copy "${{ env.Qt_ROOT_DIR }}/plugins/sqldrivers/qsqlite.dll" "$buildDir/plugins/sqldrivers"
          mkdir "$buildDir/plugins/styles"
          copy "${{ env.Qt_ROOT_DIR }}/plugins/styles/qmodernwindowsstyle.dll" "$buildDir/plugins/styles"
          mkdir "$buildDir/plugins/tls"
          copy "${{ env.Qt_ROOT_DIR }}/plugins/tls/qschannelbackend.dll" "$buildDir/plugins/tls"
          
          # Get qBittorrent app version to name the portable zip
          $qbtAppVersion = (Get-Item "build/qbittorrent.exe").VersionInfo.ProductVersion
          $portableZipName = "qBittorrent_Portable_win_x64_v${qbtAppVersion}_libt_${{ matrix.libt_version }}.zip"
          Compress-Archive -Path $buildDir -DestinationPath "upload/$portableZipName" -Force
          echo "portableZipName=$portableZipName" >> $env:GITHUB_OUTPUT # Make portableZipName available to subsequent steps

          # cmake additionals (if these are also meant for release, keep them)
          mkdir upload/cmake
          copy build/compile_commands.json upload/cmake
          copy build/target_graph.dot upload/cmake
          mkdir upload/cmake/libtorrent
          copy ${{ env.libtorrent_path }}/build/compile_commands.json upload/cmake/libtorrent

      - name: Create installer
        run: |
          7z x -o"dist/windows/" "dist/windows/NSISPlugins.zip"
          makensis /DQBT_DIST_DIR="../../upload/qBittorrent" /WX dist/windows/qbittorrent.nsi

      - name: Rename installer with Libtorrent version
        shell: pwsh # Use PowerShell Core
        run: |
          $installerFile = Get-ChildItem -Path "dist/windows" -Filter "qbittorrent_*.exe" | Select-Object -First 1
          if ($null -ne $installerFile) {
              $originalFileName = $installerFile.BaseName
              $extension = $installerFile.Extension

              # Attempt to extract the qBittorrent version part from the original filename.
              # This regex will capture the part up to the version number, including the 'v'.
              $match = $originalFileName -match '^(qbittorrent_win_x64_v\d+\.\d+\.\d+(\.\d+)?)(_.*)?$'
              $qbtBaseName = if ($match) { $Matches[1] } else { $originalFileName }

              # Construct the new filename including the libtorrent version
              $newInstallerFileName = "${qbtBaseName}_libt_${{ matrix.libt_version }}${extension}"
              $newFullPath = Join-Path -Path $installerFile.DirectoryName -ChildPath $newInstallerFileName
              
              Rename-Item -Path $installerFile.FullName -NewName $newFullPath -Force
              Write-Host "Successfully renamed installer to: $($newInstallerFileName)"
              echo "newInstallerFileName=$newInstallerFileName" >> $env:GITHUB_OUTPUT # Make newInstallerFileName available
          } else {
              Write-Warning "No qBittorrent installer file found to rename. Please check the 'Create installer' step output."
              exit 1 # Fail the step if the installer wasn't found
          }

      - name: Upload all build assets for release
        uses: actions/upload-artifact@v4
        with:
          # Each matrix combination will upload a single artifact package containing its specific installer and portable zip
          name: qBittorrent-Build-Assets-libt-${{ matrix.libt_version }}
          path: |
            upload/${{ steps.prepare_artifacts.outputs.portableZipName }} # Portable zip from prepare_artifacts step
            dist/windows/${{ steps.rename_installer_with_libtorrent_version.outputs.newInstallerFileName }} # Renamed installer from rename step
            # If you want to include cmake debug files in the release too:
            # upload/cmake/
            
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest # Lighter runner for release job
    needs: ci # This job depends on the 'ci' job completing successfully
    permissions:
      contents: write # Essential permission to create releases

    steps:
      - name: Checkout repository # Needed by softprops/action-gh-release to get tag info etc.
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts # All artifacts from both matrix jobs will be downloaded here into subdirectories

      - name: Collect release assets
        id: collect_assets
        run: |
          mkdir release_assets
          # Find all .exe and .zip files generated by the CI job and move them to release_assets
          # Adjust the 'find' command's path if your artifacts are nested deeper
          find downloaded_artifacts -type f -name 'qbittorrent_*.exe' -exec mv {} release_assets/ \;
          find downloaded_artifacts -type f -name 'qBittorrent_Portable_*.zip' -exec mv {} release_assets/ \;
          
          # List collected assets for debugging
          echo "Collected Assets:"
          ls -R release_assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This is automatically provided by GitHub Actions
        with:
          files: release_assets/* # Attach all files in the 'release_assets' directory
          tag_name: ${{ github.ref_name }} # Uses the pushed tag name (e.g., v1.0.0)
          name: Release ${{ github.ref_name }} # Name of the release
          body: |
            ## qBittorrent Release ${{ github.ref_name }}

            This release includes Windows x64 builds with the following libtorrent versions:
            * **2.0.11**
            * **1.2.20**

            ### Assets:
            * **Installers** (e.g., `qbittorrent_win_x64_v<qbt_version>_libt_2.0.11.exe`)
            * **Portable versions** (e.g., `qBittorrent_Portable_win_x64_v<qbt_version>_libt_2.0.11.zip`)

            For more detailed changes, please refer to the commit history.
          draft: false # Set to true if you want to create a draft release first
          prerelease: false # Set to true for pre-release versions (e.g., v1.0.0-beta)
