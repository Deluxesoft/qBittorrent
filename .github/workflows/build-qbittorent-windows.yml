name: Build qBittorrent Installer

on:
  workflow_dispatch: # Allows manual trigger from GitHub Actions tab
  push:              # Also triggers on pushes
    branches:
      - master       # Trigger on pushes to the 'master' branch

jobs:
  build:
    runs-on: windows-latest # Use a Windows runner for Windows installer

    steps:
      - name: Checkout qBittorrent Repository
        uses: actions/checkout@v4
        with:
          repository: 'qbittorrent/qBittorrent' # Specify the original qBittorrent repo
          ref: 'master' # Or any specific branch/tag you want to build (e.g., 'release-4.6.4')
          path: qBittorrent # Checkout into a specific directory

      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1 # Initializes the Visual Studio development environment variables

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python 3 version

      - name: Cache vcpkg dependencies
        uses: actions/cache@v4
        id: vcpkg-cache
        with:
          path: D:\a\qBittorrent\qBittorrent/vcpkg_repo/installed # Cache the installed packages
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('D:\a\qBittorrent\qBittorrent\vcpkg.json') }} # Key based on OS and vcpkg manifest

      - name: Install vcpkg dependencies
        shell: pwsh
        run: |
          $VCPKG_REPO_DIR = "D:\a\qBittorrent\qBittorrent/vcpkg_repo"
          $QB_ROOT_DIR = "D:\a\qBittorrent\qBittorrent" # Define qBittorrent root directory where vcpkg.json is located
          New-Item -ItemType Directory -Force -Path $VCPKG_REPO_DIR

          if (-not (Test-Path "$VCPKG_REPO_DIR\.git")) {
            Write-Host "Cloning vcpkg into $VCPKG_REPO_DIR..."
            git clone https://github.com/microsoft/vcpkg.git $VCPKG_REPO_DIR
          } else {
            Write-Host "vcpkg repository already exists, skipping clone."
          }

          cd $VCPKG_REPO_DIR # Change to vcpkg directory to bootstrap
          Write-Host "Bootstrapping vcpkg..."
          .\bootstrap-vcpkg.bat

          Write-Host "Installing vcpkg dependencies for qBittorrent..."
          # Change to qBittorrent root directory for manifest installation
          cd $QB_ROOT_DIR
          # Now, execute vcpkg from its directory, using the correct manifest mode syntax
          "$VCPKG_REPO_DIR\vcpkg.exe" install --triplet x64-windows-static --recurse

      - name: Manually Build and Install libtorrent
        shell: pwsh
        env:
          VCPKG_REPO_DIR: D:\a\qBittorrent\qBittorrent/vcpkg_repo
          LIBTORRENT_SOURCE_DIR: D:\a\qBittorrent\qBittorrent/libtorrent_source
          LIBTORRENT_INSTALL_DIR: D:\a\qBittorrent\qBittorrent/libtorrent_install
        run: |
          Write-Host "Preparing for manual libtorrent build."

          # Create directories
          New-Item -ItemType Directory -Force -Path $env:LIBTORRENT_SOURCE_DIR
          New-Item -ItemType Directory -Force -Path $env:LIBTORRENT_INSTALL_DIR

          # Clone libtorrent repository
          if (-not (Test-Path "$env:LIBTORRENT_SOURCE_DIR\.git")) {
            Write-Host "Cloning libtorrent into $env:LIBTORRENT_SOURCE_DIR..."
            git clone https://github.com/arvidn/libtorrent.git $env:LIBTORRENT_SOURCE_DIR
          } else {
            Write-Host "Libtorrent source directory already exists, skipping clone."
          }

          cd $env:LIBTORRENT_SOURCE_DIR
          Write-Host "Checking out RC_2_0 branch for libtorrent (newer series)..."
          git checkout RC_2_0
          git pull # Ensure it's up-to-date with the chosen branch

          Write-Host "Initializing and updating libtorrent submodules..."
          git submodule update --init --recursive

          Write-Host "Configuring libtorrent with CMake..."
          cmake -G "Ninja" -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_REPO_DIR\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET="x64-windows-static" `
            -DBUILD_SHARED_LIBS=OFF `
            -Dstatic_runtime=ON `
            -Ddeprecated-functions=ON
          Write-Host "Libtorrent configuration complete."

          Write-Host "Building libtorrent..."
          cmake --build build --config Release
          Write-Host "Libtorrent build complete."

          Write-Host "Installing libtorrent to $env:LIBTORRENT_INSTALL_DIR..."
          cmake --install build --prefix $env:LIBTORRENT_INSTALL_DIR
          Write-Host "Libtorrent installation complete."

          # Output the libtorrent install path for the next step
          echo "LIBTORRENT_INSTALL_DIR_OUTPUT=$env:LIBTORRENT_INSTALL_DIR" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Build qBittorrent
        shell: pwsh
        env:
          LIBTORRENT_INSTALL_DIR_FROM_PREV: ${{ steps.libtorrent_build.outputs.LIBTORRENT_INSTALL_DIR_OUTPUT }}
          VCPKG_ROOT: D:\a\qBittorrent\qBittorrent/vcpkg_repo
          VCPKG_TARGET_TRIPLET: x64-windows-static
          QB_BUILD_DIR: D:\a\qBittorrent\qBittorrent/build_qbittorrent
        run: |
          Write-Host "Configuring qBittorrent with CMake..."
          $env:CMAKE_PREFIX_PATH = "$env:LIBTORRENT_INSTALL_DIR_FROM_PREV;$env:CMAKE_PREFIX_PATH"

          cd D:\a\qBittorrent\qBittorrent

          cmake -G "Ninja" -B $env:QB_BUILD_DIR `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=$env:VCPKG_TARGET_TRIPLET `
            -DBOOST_ASIO_USE_IOCP=ON `
            -DQT_STATIC_BUILD=ON `
            -DQT_LTCG=ON `
            -DLIBTP_QT=ON `
            -DBUILD_GUI=ON `
            -DWEBUITESTS=OFF `
            -DSTACK_PROTECTOR=ON `
            -DQT_VERSION=6
          Write-Host "qBittorrent configuration complete."

          Write-Host "Building qBittorrent..."
          cmake --build $env:QB_BUILD_DIR --config Release
          Write-Host "qBittorrent build complete."

      - name: Generate Inno Setup Installer
        shell: pwsh
        env:
          QB_BUILD_DIR: D:\a\qBittorrent\qBittorrent/build_qbittorrent
          QB_VERSION: master
        run: |
          Write-Host "Generating Inno Setup Installer..."
          $installerOutput = "$env:GITHUB_WORKSPACE/qbittorrent_installer.exe"
          $innoSetupExe = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"

          if (-not (Test-Path $innoSetupExe)) {
              throw "Inno Setup compiler not found at $innoSetupExe"
          }

          $issFile = "D:\a\qBittorrent\qBittorrent\dist\qBittorrent.iss"
          if (-not (Test-Path $issFile)) {
              throw "qBittorrent Inno Setup script not found at $issFile"
          }

          $InstallerOutputDir = "$env:GITHUB_WORKSPACE/installers"
          New-Item -ItemType Directory -Force -Path $InstallerOutputDir

          & "$innoSetupExe" /o"$InstallerOutputDir" /dVERSION="$env:QB_VERSION" /dBUILD_DIR="$env:QB_BUILD_DIR" /dOUTPUT_BASE_NAME="qbittorrent_v${env:QB_VERSION}_x64_setup" "$issFile"
          Write-Host "Installer generation complete."

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: qBittorrent-Installer
          path: ${{ github.workspace }}/installers/*.exe
          retention-days: 7
